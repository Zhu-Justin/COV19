library(EpiEstim)
install.packages("EpiEstim")
library(EpiEstim)
library(ggplot2)
library(cluster.datasets)
install.packages(cluster.datasets)
# load data
data(Flu2009)
# explore data and write to file
head(Flu2009$incidence)
install.packages("cluster.datasets")
library(cluster.datasets)
head(Flu2009$si_data)
write.csv(Flu2009, "Flu2009.csv")
type(Flu2009)
class(Flu2009)
write.csv(Flu2009$incidence, "Flu2009.csv")
setwd("/Users/runlinwang/Documents/Harvard-WHO/1-EpiEstim")
write.csv(Flu2009$incidence, "Flu2009.csv")
png("incidents.png")
plot(as.incidence(Flu2009$incidence$I, dates = Flu2009$incidence$dates))
dev.off()
library(cluster.datasets)
library("cluster.datasets")
library("as.incidence")
install.packages("as.incidence")
res_parametric_si <- estimate_R(Flu2009$incidence,
method="parametric_si",
config = make_config(list(
mean_si = 4.8,
std_si = 2.3))
)
# Explore model
head(res_parametric_si)
head(res_parametric_si$R)
# Write the rate of transmission values
Rt <- data.frame(res_parametric_si$R)
# Write the rate of transmission values
Rt <- data.frame(res_parametric_si$R)
write.csv(Rt, "Rt.csv")
mean(Flu2009$incidence$I)
sd(Flu2009$incidence$I)
# Plot
png("res_parametric_si.png")
plot(res_parametric_si, legend = FALSE)
dev.off()
# Setup
## GGplot converts your data and code into "layers" by using aesthetic mapping aes()
options(scipen=999)  # turn off scientific notation like 1e+06
library(ggplot2)
data("midwest", package = "ggplot2")  # load the data
# 1. Init Ggplot
g1 <- ggplot(midwest, aes(x=area, y=poptotal))  # area and poptotal are columns in 'midwest'
#  2. We can add points and smoothing features
g2 <- g1 + geom_point() + geom_smooth(method="lm")  # set se=FALSE to turnoff confidence bands
# 3. We can add Title and Labels
g3a <- g2 + labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# 4. We can make the graph prettier by zooming in and coloring
g4 <- g3a + geom_point(aes(col=state), size=3)  # Set color to vary based on state categories.
# 1. Init Ggplot
names(midwest)
midwest$area
head(midwest$area)
plot(g1)
#  2. We can add points and smoothing features
g2 <- g1 + geom_point() + geom_smooth(method="lm")  # set se=FALSE to turnoff confidence bands
plot(g2)
# 3. We can add Title and Labels
g3a <- g2 + labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
plot(g3a)
# 4. We can make the graph prettier by zooming in and coloring
g4 <- g3a + geom_point(aes(col=state), size=3)  # Set color to vary based on state categories.
plot(g4)
g5 <- g4 + coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000))  # zooms in
plot(g5)
# Change the tick marks
g6 <- g5 + scale_x_continuous(breaks=seq(0, 0.1, 0.01))
plot(g6)
# Change the Axis
g7 <- g6 + scale_x_continuous(breaks=seq(0, 0.1, 0.01), labels = sprintf("%1.2f%%", seq(0, 0.1, 0.01))) +
scale_y_continuous(breaks=seq(0, 1000000, 200000), labels = function(x){paste0(x/1000, 'K')})
plot(g7)
install.packages("shiny")
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
install.packages("fluidPage")
setwd(../2-ShinyApp)
setwd("../2-ShinyApp")
runApp("demo1.R")
library(shiny)
setwd("../2-ShinyApp")
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel("sidebar panel"),
mainPanel("main panel",       p("p creates a paragraph of text."),
p("A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.", style = "font-family: 'times'; font-si16pt"),
strong("strong() makes bold text."),
em("em() creates italicized (i.e, emphasized) text."),
br(),
code("code displays your text similar to computer code"),
div("div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'style = color:blue' to div", style = "color:blue"),
br(),
p("span does the same thing as div, but it works with",
span("groups of words", style = "color:blue"),
"that appear inside a paragraph.")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny); runApp('demo3.R')
runApp('demo4.R')
View(g3a)
library(shiny); runApp('demo3.R')
runApp('~/Documents/Harvard-WHO/ShinyFlu2009.r')
runApp('~/Documents/Harvard-WHO/ShinyFlu2009.r')
runApp('~/Documents/Harvard-WHO/ShinyFlu2009.r')
runApp('~/Documents/Harvard-WHO/ShinyFlu2009.r')
runApp('~/Documents/Harvard-WHO/ShinyFlu2009.r')
runApp('~/Documents/Harvard-WHO/ShinyFlu2009.r')
