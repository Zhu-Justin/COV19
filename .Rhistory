library(shiny); runApp('2-ShinyApp/demo1.R')
runApp('2-ShinyApp/demo4.R')
runApp('2-ShinyApp/demo4.R')
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
# explore data and write to file
head(Flu2009$incidence)
head(Flu2009$si_data)
write.csv(Flu2009, "Flu2009.csv")
## 1. serial interval (SI) distribution:
## interval-ceonsored serial interval data:
## each line represents a transmission event,
## EL/ER show the lower/upper bound of the symptoms onset date in the infector
## SL/SR show the same for the secondary case
## type has entries 0 corresponding to doubly interval-censored data
## (see Reich et al. Statist. Med. 2009).
png("incidents.png")
plot(as.incidence(Flu2009$incidence$I, dates = Flu2009$incidence$dates))
dev.off()
res_parametric_si <- estimate_R(Flu2009$incidence,
method="parametric_si",
config = make_config(list(
mean_si = 2.6,
std_si = 1.5))
)
# Explore model
head(res_parametric_si)
head(res_parametric_si$R)
# Write the rate of transmission values
Rt <- data.frame(res_parametric_si$R)
write.csv(Rt, "Rt.csv")
mean(Flu2009$incidence$I)
sd(Flu2009$incidence$I)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
data(Flu2009)
library(EpiEstim)
install.packages("EpiEstim")
library(EpiEstim)
install.packages("ggplot2")
install.packages("EpiEstim")
install.packages("incidence")
install.packages("cluster.datasets")
install.packages("cluster.datasets")
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
library(EpiEstim)
library(EpiEstim)
png("incidents.png")
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
library(EpiEstim)
install.packages('EpiEstim')
library(EpiEstim)
library(EpiEstim)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
View(Flu2009)
head(Flu2009$incidence)
head(Flu2009$si_data)
write.csv(Flu2009, "Flu2009.csv")
png("incidents.png")
res_parametric_si <- estimate_R(Flu2009$incidence,
method="parametric_si",
config = make_config(list(
mean_si = 2.6,
std_si = 1.5))
)
View(res_parametric_si)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
# explore data and write to file
head(Flu2009$incidence)
head(Flu2009$si_data)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
# explore data and write to file
head(Flu2009$incidence)
head(Flu2009$si_data)
write.csv(Flu2009, "Flu2009.csv")
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
# explore data and write to file
head(Flu2009$incidence)
head(Flu2009$si_data)
write.csv(Flu2009, "Flu2009.csv")
## 1. serial interval (SI) distribution:
## interval-ceonsored serial interval data:
## each line represents a transmission event,
## EL/ER show the lower/upper bound of the symptoms onset date in the infector
## SL/SR show the same for the secondary case
## type has entries 0 corresponding to doubly interval-censored data
## (see Reich et al. Statist. Med. 2009).
png("incidents.png")
plot(as.incidence(Flu2009$incidence$I, dates = Flu2009$incidence$dates))
dev.off()
res_parametric_si <- estimate_R(Flu2009$incidence,
method="parametric_si",
config = make_config(list(
mean_si = 2.6,
std_si = 1.5))
head(res_parametric_si)
head(res_parametric_si$R)
Rt <- data.frame(res_parametric_si$R)
write.csv(Rt, "Rt.csv")
mean(Flu2009$incidence$I)
sd(Flu2009$incidence$I)
png("res_parametric_si.png")
plot(res_parametric_si, legend = FALSE)
dev.off()
png("res_parametric_si.png")
plot(res_parametric_si, legend = FALSE)
dev.off()
png("res_parametric_si.png")
plot(res_parametric_si, legend = FALSE)
dev.off()
res_non_parametric_si <- estimate_R(Flu2009$incidence,
method="non_parametric_si",
config = make_config(list(
si_distr = Flu2009$si_distr))
)
png("res_nonparametric_si.png")
plot(res_non_parametric_si, "R")
dev.off()
View(Rt)
View(res_parametric_si)
View(res_non_parametric_si)
View(Flu2009)
discr_si(0:20, mu = 2.6, sigma = 1.5)
mean(Flu2009$incidence$I)
sd(Flu2009$incidence$I)
Flu2009$incidence
library(shiny); runApp('2-ShinyApp/demo1.R')
runApp('2-ShinyApp/demo4.R')
runApp('2-ShinyApp/demo4.R')
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
# explore data and write to file
head(Flu2009$incidence)
head(Flu2009$si_data)
write.csv(Flu2009, "Flu2009.csv")
## 1. serial interval (SI) distribution:
## interval-ceonsored serial interval data:
## each line represents a transmission event,
## EL/ER show the lower/upper bound of the symptoms onset date in the infector
## SL/SR show the same for the secondary case
## type has entries 0 corresponding to doubly interval-censored data
## (see Reich et al. Statist. Med. 2009).
png("incidents.png")
plot(as.incidence(Flu2009$incidence$I, dates = Flu2009$incidence$dates))
dev.off()
res_parametric_si <- estimate_R(Flu2009$incidence,
method="parametric_si",
config = make_config(list(
mean_si = 2.6,
std_si = 1.5))
)
View(res_parametric_si)
library(shiny)
library(shiny)
runExample("01_hello")
shiny::runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
shiny::runApp('~/Dropbox/Harvard-WHO/Harvard-WHO/COVID19')
shiny::runApp('~/Dropbox/Harvard-WHO/Harvard-WHO/COVID19')
runApp()
runApp('carina_shiny')
shiny::runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
# when reading semicolon separated files,
# having a comma separator causes `read.csv` to error
tryCatch(
{
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
# Plotting function using ggplot2
output$plot <- renderPlot({
res_parametric_si <- estimate_R(x,
method = "parametric_si",
config = make_config(list(
mean_si = 4.8,
std_si = 2.3)))
plot_R_data <- data.frame(dates = res_parametric_si$dates)
# plot(df())
})
}
server <- function(input, output) {
csv <- reactive({
req(input$file1)
read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
})
#df <- reactive({
#req(input$file1)
#x = csv()
#x[,1]<-as.Date(x[,1], "%d/%m/%Y")
#dfR <- estimate_R(x, method = "parametric_si", config = make_config(list(mean_si = 4.8, std_si = 2.3)))
#return(dfR)
#})
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
# when reading semicolon separated files,
# having a comma separator causes `read.csv` to error
tryCatch(
{
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
# Plotting function using ggplot2
output$plot <- renderPlot({
res_parametric_si <- estimate_R(x,
method = "parametric_si",
config = make_config(list(
mean_si = 4.8,
std_si = 2.3)))
plot_R_data <- data.frame(dates = res_parametric_si$dates)
# plot(df())
})
}
View(server)
shiny::runApp('carina_shiny')
