if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
# Plotting function using ggplot2
output$plot <- renderPlot({
res_parametric_si <- estimate_R(x,
method = "parametric_si",
config = make_config(list(
mean_si = 4.8,
std_si = 2.3)))
plot_R_data <- data.frame(dates = res_parametric_si$dates)
# plot(df())
})
}
View(server)
shiny::runApp('carina_shiny')
# Prodromal period [days]
Dp<-2
47.5
# Early infective period,
Di<-5
47.5
# Late infective period [days],
Dl<-7
5
# Relative contagiousness in the prodromal period,
Cp<-1
# Relative contagiousness in the late infective period,
Cl<-0.05/0.475
Cl
# [1] 0.1052632
0.025/0.0475
# [1] 0.5263158
0.05/(0.475)
# [1] 0.1052632
# [1] 1.052632
# [1] 0.05263158
# Infections which will lead to sickness,
Fsick<-0.67
# Fsick = P(Prodromal + Early Infective + Late Infective | Latent Period)
# Probability that a sick patient is isolated,
Fiso<-0.5
# Contact reduction for cases in home isolation,
Phome<- 0.75
# Estimation of the impact by contact reduction
# This section allows to estimate the impact of contact reduction based on a number of parameters. The parameter for R0 can be suggested by default in the interface, but it should be allowed to be changed. With those parameters, the formula calculates the impact on the transmission by applying contact reduction.
impact_case_isolation<-(Cp*Dp+(1-Fsick*Fiso*Phome)*(Di+Cl*Dl))/(Cp*Dp+Di+Cl*Dl)
impact_case_isolation
# [1] 0.8171173
# Rt_observed <- estimated result by EpiEstim tool
library(EpiEstim)
data(Flu2009)
res_parametric_si <- estimate_R(Flu2009$incidence,
method="parametric_si",
config = make_config(list(
mean_si = 2.6,
std_si = 1.5)))
Rt <- data.frame(res_parametric_si$R)
Rt_observed <- Rt
R0 <- 3.7
impact_contact_reduction <- Rt_observed / (R0 * impact_case_isolation)
head(impact_contact_reduction)
#     t_start    t_end   Mean.R.     Std.R. Quantile.0.025.R. Quantile.0.05.R. Quantile.0.25.R. Median.R. Quantile.0.75.R.
# 1 0.6615213 2.646085 0.5741336 0.13532458         0.3402679        0.3710914        0.8133313 0.5635372        0.8133313
# 2 0.9922820 2.976846 0.5785559 0.12063724         0.3667548        0.3954177        0.7902271 0.5701930        0.7902271
# 3 1.3230426 3.307607 0.5083984 0.10167967         0.3290086        0.3534818        0.6863867 0.5016360        0.6863867
# 4 1.6538033 3.638367 0.4735960 0.08950123         0.3147011        0.3366022        0.6297839 0.4679700        0.6297839
# 5 1.9845639 3.969128 0.4705814 0.08318782         0.3218773        0.3426046        0.6152503 0.4656886        0.6152503
# 6 2.3153246 4.299889 0.5409172 0.08346533         0.3898455        0.4113305        0.6851285 0.5366303        0.6851285
#   Quantile.0.95.R. Quantile.0.975.R.
# 1        0.8133313         0.8681744
# 2        0.7902271         0.8378562
# 3        0.6863867         0.7261982
# 4        0.6297839         0.6644481
# 5        0.6152503         0.6470791
# 6        0.6851285         0.7163434
pct_contact_reduction<- 1 - impact_contact_reduction
head(pct_contact_reduction)
#       t_start     t_end   Mean.R.    Std.R. Quantile.0.025.R. Quantile.0.05.R. Quantile.0.25.R. Median.R. Quantile.0.75.R.
# 1  0.33847869 -1.646085 0.4258664 0.8646754         0.6597321        0.6289086        0.1866687 0.4364628        0.1866687
# 2  0.00771803 -1.976846 0.4214441 0.8793628         0.6332452        0.6045823        0.2097729 0.4298070        0.2097729
# 3 -0.32304263 -2.307607 0.4916016 0.8983203         0.6709914        0.6465182        0.3136133 0.4983640        0.3136133
# 4 -0.65380328 -2.638367 0.5264040 0.9104988         0.6852989        0.6633978        0.3702161 0.5320300        0.3702161
# 5 -0.98456394 -2.969128 0.5294186 0.9168122         0.6781227        0.6573954        0.3847497 0.5343114        0.3847497
# 6 -1.31532460 -3.299889 0.4590828 0.9165347         0.6101545        0.5886695        0.3148715 0.4633697        0.3148715
#   Quantile.0.95.R. Quantile.0.975.R.
# 1        0.1866687         0.1318256
# 2        0.2097729         0.1621438
# 3        0.3136133         0.2738018
# 4        0.3702161         0.3355519
# 5        0.3847497         0.3529209
# 6        0.3148715         0.2836566
# Prodromal period [days]
Dp<-2
47.5
# Prodromal period [days]
Dp<-2
# Early infective period
Di<-5
# Late infective period [days]
Dl<-7
# Relative contagiousness in the prodromal period
Cp<-1
# Relative contagiousness in the late infective period
Cl<-0.05
# Infections which will lead to sickness
Fsick<-0.67
# Probability that a sick patient is isolated
Fiso<-0.5
# Contact reduction for cases in home isolation
Phome<- 0.75
impact_case_isolation <- (Cp*Dp+(1-Fsick*Fiso*Phome)*(Di+Cl*Dl))/(Cp*Dp+Di+Cl*Dl)
impact_case_isolation
shiny::runApp('COVID19')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
# COVID-19 Estimator
This is an interface that helps countries estimate the rate of transmission of COVID-19 using the number of reported cases on specific dates.
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
mainPanel(
tabsetPanel(
tabPanel("Table",
includeMarkdown("Modeling-COVID19.md")
runApp('preliminary_shiny')
# Define UI for application
ui <- fluidPage(
# Application title
titlePanel("WHO / PAHO"),
sidebarLayout(
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Insert CSV File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Horizontal line ----
tags$hr(),
# Input: Checkbox if file has header ----
checkboxInput(inputId = "header", label = "Header", value = TRUE),
# Input: Select separator ----
radioButtons(inputId = "sep",
label = "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
# Input: Select quotes ----
radioButtons(inputId = "quote",
label = "Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons(inputId = "disp",
label = "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
mainPanel(
tabsetPanel(
tabPanel("Table",
includeMarkdown("carina_shiny/Modeling-COVID19.md"),
tableOutput("contents")),
tabPanel("Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("Summary"))
)
)))
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
# Define UI for application
ui <- fluidPage(
# Application title
titlePanel("WHO / PAHO"),
sidebarLayout(
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Insert CSV File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Horizontal line ----
tags$hr(),
# Input: Checkbox if file has header ----
checkboxInput(inputId = "header", label = "Header", value = TRUE),
# Input: Select separator ----
radioButtons(inputId = "sep",
label = "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
# Input: Select quotes ----
radioButtons(inputId = "quote",
label = "Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons(inputId = "disp",
label = "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
mainPanel(
tabsetPanel(
tabPanel("Table",
includeMarkdown("/Users/carinapeng/Harvard-WHO/COVID19"),
tableOutput("contents")),
tabPanel("Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("Summary"))
)
)))
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('COVID19')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
df()
runApp('preliminary_shiny')
dfR()
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('~/Dropbox/Harvard-WHO/Harvard-WHO/COVID19')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
?downloadButton
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('~/Dropbox/Harvard-WHO/Harvard-WHO/COVID19')
runApp('preliminary_shiny')
runApp('preliminary_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
df()
df("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv
"/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv"
df("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
dfR("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
runApp('carina_shiny')
shiny::runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
shiny::runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
shiny::runApp('carina_shiny')
runApp('carina')
runApp('carina')
runApp('carina')
knitr::opts_chunk$set(echo = TRUE)
impact_case_isolation
impact_contact_reduction <- Rt_observed / (R0 * impact_case_isolation)
read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
pais <- read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
pais <- read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
estimate_R(pais,
method="parametric_si",
config = make_config(list(
mean_si = 4.8,
std_si = 2.3)))
pais <- read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
pais[,1] <- as.Date(pais[,1], "%d/%m/%y")
pais
pais <- read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
pais[,1] <- as.Date(pais[,1], "%d/%m/%y")
estimate_R(pais,
method = "parametric_si",
config = make_config(list(mean_si = 4.8,
std_si = 2.3)))
Rt <- data.frame(df$R)
Rt <- data.frame(res_parametric_si$R)
Rt
df <- estimate_R(pais,
method = "parametric_si",
config = make_config(list(mean_si = 4.8,
std_si = 2.3)))
df
Rt_observed <- Rt
Rt_observed
Rt_observed
Rt_observed
Rt_observed
Rt
mean(Mean.R.)
mean(Rt$Mean.R.)
Rt
summary(Rt)
# Prodromal period [days]
Dp<-2
# Early infective period,
Di<-5
# Late infective period [days],
Dl<-7
# Relative contagiousness in the prodromal period,
Cp<-1
# Relative contagiousness in the late infective period,
Cl<-0.05
# Infections which will lead to sickness,
Fsick<-0.67
# Probability that a sick patient is isolated,
Fiso<-0.5
# Contact reduction for cases in home isolation,
Phome<- 0.75
# Estimation of the impact by contact reduction
# This section allows to estimate the impact of contact reduction based on a number of parameters. The parameter for R0 can be suggested by default in the interface, but it should be allowed to be changed. With those parameters, the formula calculates the impact on the transmission by applying contact reduction.
impact_case_isolation<-(Cp*Dp+(1-Fsick*Fiso*Phome)*(Di+Cl*Dl))/(Cp*Dp+Di+Cl*Dl)
impact_case_isolation
# [1] 0.8171173
R0 <- 3.7
pais <- read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
pais[,1] <- as.Date(pais[,1], "%d/%m/%y")
df <- estimate_R(pais,
method = "parametric_si",
config = make_config(list(mean_si = 4.8,
std_si = 2.3)))
Rt <- data.frame(res_parametric_si$R)
Rt_observed <- mean(Rt$Mean.R.)
impact_contact_reduction <- Rt_observed / (R0 * impact_case_isolation)
impact_contact_reduction
perc_contact_reduction
perc_contact_reduction <- 1 - impact_contact_reduction
perc_contact_reduction
perc_contact_reduction <- (1 - impact_contact_reduction) *100
perc_contact_reduction
perc_contact_reduction <- (1 - impact_contact_reduction) *100
perc_contact_reduction
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# Prodromal period [days]
Dp<-2
# Early infective period,
Di<-5
# Late infective period [days],
Dl<-7
# Relative contagiousness in the prodromal period,
Cp<-1
# Relative contagiousness in the late infective period,
Cl<-0.05
# Infections which will lead to sickness,
Fsick<-0.67
# Probability that a sick patient is isolated,
Fiso<-0.5
# Contact reduction for cases in home isolation,
Phome<- 0.75
# Estimation of the impact by contact reduction
# This section allows to estimate the impact of contact reduction based on a number of parameters. The parameter for R0 can be suggested by default in the interface, but it should be allowed to be changed. With those parameters, the formula calculates the impact on the transmission by applying contact reduction.
impact_case_isolation<-(Cp*Dp+(1-Fsick*Fiso*Phome)*(Di+Cl*Dl))/(Cp*Dp+Di+Cl*Dl)
impact_case_isolation
# [1] 0.8171173
perc_contact_reduction <- (1 - impact_contact_reduction) *100
perc_contact_reduction
# [1] 65.70918
> The percentage of contact reduction for the observed Rt is `r perc_contact_reduction`.
perc_contact_reduction <- (1 - impact_contact_reduction) *100
perc_contact_reduction
# [1] 65.70918
The percentage of contact reduction for the observed Rt is `r perc_contact_reduction`.
perc_contact_reduction
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# Prodromal period [days]
Dp<-2
# Early infective period,
Di<-5
# Late infective period [days],
Dl<-7
# Relative contagiousness in the prodromal period,
Cp<-1
# Relative contagiousness in the late infective period,
Cl<-0.05
# Infections which will lead to sickness,
Fsick<-0.67
# Probability that a sick patient is isolated,
Fiso<-0.5
# Contact reduction for cases in home isolation,
Phome<- 0.75
# Estimation of the impact by contact reduction
# This section allows to estimate the impact of contact reduction based on a number of parameters. The parameter for R0 can be suggested by default in the interface, but it should be allowed to be changed. With those parameters, the formula calculates the impact on the transmission by applying contact reduction.
impact_case_isolation<-(Cp*Dp+(1-Fsick*Fiso*Phome)*(Di+Cl*Dl))/(Cp*Dp+Di+Cl*Dl)
impact_case_isolation
# [1] 0.8171173
R0 <- 3.7
pais <- read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
pais[,1] <- as.Date(pais[,1], "%d/%m/%y")
df <- estimate_R(pais,
method = "parametric_si",
config = make_config(list(mean_si = 4.8,
std_si = 2.3)))
Rt <- data.frame(df$R)
Rt_observed <- mean(Rt$Mean.R.)
impact_contact_reduction <- Rt_observed / (R0 * impact_case_isolation)
impact_contact_reduction
# [1] 0.3429082
perc_contact_reduction <- (1 - impact_contact_reduction) *100
perc_contact_reduction
# [1] 65.70918
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# Prodromal period [days]
Dp<-2
# Early infective period,
Di<-5
# Late infective period [days],
Dl<-7
# Relative contagiousness in the prodromal period,
Cp<-1
# Relative contagiousness in the late infective period,
Cl<-0.05
# Infections which will lead to sickness,
Fsick<-0.67
# Probability that a sick patient is isolated,
Fiso<-0.5
# Contact reduction for cases in home isolation,
Phome<- 0.75
# Estimation of the impact by contact reduction
# This section allows to estimate the impact of contact reduction based on a number of parameters. The parameter for R0 can be suggested by default in the interface, but it should be allowed to be changed. With those parameters, the formula calculates the impact on the transmission by applying contact reduction.
impact_case_isolation<-(Cp*Dp+(1-Fsick*Fiso*Phome)*(Di+Cl*Dl))/(Cp*Dp+Di+Cl*Dl)
impact_case_isolation
# [1] 0.8171173
R0 <- 3.7
pais <- read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
pais[,1] <- as.Date(pais[,1], "%d/%m/%y")
df <- estimate_R(pais,
method = "parametric_si",
config = make_config(list(mean_si = 4.8,
std_si = 2.3)))
Rt <- data.frame(df$R)
Rt_observed <- mean(Rt$Mean.R.)
impact_contact_reduction <- Rt_observed / (R0 * impact_case_isolation)
impact_contact_reduction
# [1] 0.3429082
perc_contact_reduction <- round((1 - impact_contact_reduction) *100), digits = 2)
perc_contact_reduction <- round((1 - impact_contact_reduction) *100, digits = 2)
perc_contact_reduction
# [1] 39.21856
perc_contact_reduction <- round((1 - impact_contact_reduction) *100, digits = 0)
perc_contact_reduction
# [1] 39.21856
perc_contact_reduction <- round((1 - impact_contact_reduction) *100, digits = 2)
perc_contact_reduction
# [1] 39
