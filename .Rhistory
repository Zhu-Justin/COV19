runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
shiny::runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
shiny::runApp('carina_shiny')
runApp('carina')
runApp('carina')
runApp('carina')
knitr::opts_chunk$set(echo = TRUE)
impact_case_isolation
impact_contact_reduction <- Rt_observed / (R0 * impact_case_isolation)
read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
pais <- read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
pais <- read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
estimate_R(pais,
method="parametric_si",
config = make_config(list(
mean_si = 4.8,
std_si = 2.3)))
pais <- read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
pais[,1] <- as.Date(pais[,1], "%d/%m/%y")
pais
pais <- read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
pais[,1] <- as.Date(pais[,1], "%d/%m/%y")
estimate_R(pais,
method = "parametric_si",
config = make_config(list(mean_si = 4.8,
std_si = 2.3)))
Rt <- data.frame(df$R)
Rt <- data.frame(res_parametric_si$R)
Rt
df <- estimate_R(pais,
method = "parametric_si",
config = make_config(list(mean_si = 4.8,
std_si = 2.3)))
df
Rt_observed <- Rt
Rt_observed
Rt_observed
Rt_observed
Rt_observed
Rt
mean(Mean.R.)
mean(Rt$Mean.R.)
Rt
summary(Rt)
# Prodromal period [days]
Dp<-2
# Early infective period,
Di<-5
# Late infective period [days],
Dl<-7
# Relative contagiousness in the prodromal period,
Cp<-1
# Relative contagiousness in the late infective period,
Cl<-0.05
# Infections which will lead to sickness,
Fsick<-0.67
# Probability that a sick patient is isolated,
Fiso<-0.5
# Contact reduction for cases in home isolation,
Phome<- 0.75
# Estimation of the impact by contact reduction
# This section allows to estimate the impact of contact reduction based on a number of parameters. The parameter for R0 can be suggested by default in the interface, but it should be allowed to be changed. With those parameters, the formula calculates the impact on the transmission by applying contact reduction.
impact_case_isolation<-(Cp*Dp+(1-Fsick*Fiso*Phome)*(Di+Cl*Dl))/(Cp*Dp+Di+Cl*Dl)
impact_case_isolation
# [1] 0.8171173
R0 <- 3.7
pais <- read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
pais[,1] <- as.Date(pais[,1], "%d/%m/%y")
df <- estimate_R(pais,
method = "parametric_si",
config = make_config(list(mean_si = 4.8,
std_si = 2.3)))
Rt <- data.frame(res_parametric_si$R)
Rt_observed <- mean(Rt$Mean.R.)
impact_contact_reduction <- Rt_observed / (R0 * impact_case_isolation)
impact_contact_reduction
perc_contact_reduction
perc_contact_reduction <- 1 - impact_contact_reduction
perc_contact_reduction
perc_contact_reduction <- (1 - impact_contact_reduction) *100
perc_contact_reduction
perc_contact_reduction <- (1 - impact_contact_reduction) *100
perc_contact_reduction
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# Prodromal period [days]
Dp<-2
# Early infective period,
Di<-5
# Late infective period [days],
Dl<-7
# Relative contagiousness in the prodromal period,
Cp<-1
# Relative contagiousness in the late infective period,
Cl<-0.05
# Infections which will lead to sickness,
Fsick<-0.67
# Probability that a sick patient is isolated,
Fiso<-0.5
# Contact reduction for cases in home isolation,
Phome<- 0.75
# Estimation of the impact by contact reduction
# This section allows to estimate the impact of contact reduction based on a number of parameters. The parameter for R0 can be suggested by default in the interface, but it should be allowed to be changed. With those parameters, the formula calculates the impact on the transmission by applying contact reduction.
impact_case_isolation<-(Cp*Dp+(1-Fsick*Fiso*Phome)*(Di+Cl*Dl))/(Cp*Dp+Di+Cl*Dl)
impact_case_isolation
# [1] 0.8171173
perc_contact_reduction <- (1 - impact_contact_reduction) *100
perc_contact_reduction
# [1] 65.70918
> The percentage of contact reduction for the observed Rt is `r perc_contact_reduction`.
perc_contact_reduction <- (1 - impact_contact_reduction) *100
perc_contact_reduction
# [1] 65.70918
The percentage of contact reduction for the observed Rt is `r perc_contact_reduction`.
perc_contact_reduction
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# Prodromal period [days]
Dp<-2
# Early infective period,
Di<-5
# Late infective period [days],
Dl<-7
# Relative contagiousness in the prodromal period,
Cp<-1
# Relative contagiousness in the late infective period,
Cl<-0.05
# Infections which will lead to sickness,
Fsick<-0.67
# Probability that a sick patient is isolated,
Fiso<-0.5
# Contact reduction for cases in home isolation,
Phome<- 0.75
# Estimation of the impact by contact reduction
# This section allows to estimate the impact of contact reduction based on a number of parameters. The parameter for R0 can be suggested by default in the interface, but it should be allowed to be changed. With those parameters, the formula calculates the impact on the transmission by applying contact reduction.
impact_case_isolation<-(Cp*Dp+(1-Fsick*Fiso*Phome)*(Di+Cl*Dl))/(Cp*Dp+Di+Cl*Dl)
impact_case_isolation
# [1] 0.8171173
R0 <- 3.7
pais <- read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
pais[,1] <- as.Date(pais[,1], "%d/%m/%y")
df <- estimate_R(pais,
method = "parametric_si",
config = make_config(list(mean_si = 4.8,
std_si = 2.3)))
Rt <- data.frame(df$R)
Rt_observed <- mean(Rt$Mean.R.)
impact_contact_reduction <- Rt_observed / (R0 * impact_case_isolation)
impact_contact_reduction
# [1] 0.3429082
perc_contact_reduction <- (1 - impact_contact_reduction) *100
perc_contact_reduction
# [1] 65.70918
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# Prodromal period [days]
Dp<-2
# Early infective period,
Di<-5
# Late infective period [days],
Dl<-7
# Relative contagiousness in the prodromal period,
Cp<-1
# Relative contagiousness in the late infective period,
Cl<-0.05
# Infections which will lead to sickness,
Fsick<-0.67
# Probability that a sick patient is isolated,
Fiso<-0.5
# Contact reduction for cases in home isolation,
Phome<- 0.75
# Estimation of the impact by contact reduction
# This section allows to estimate the impact of contact reduction based on a number of parameters. The parameter for R0 can be suggested by default in the interface, but it should be allowed to be changed. With those parameters, the formula calculates the impact on the transmission by applying contact reduction.
impact_case_isolation<-(Cp*Dp+(1-Fsick*Fiso*Phome)*(Di+Cl*Dl))/(Cp*Dp+Di+Cl*Dl)
impact_case_isolation
# [1] 0.8171173
R0 <- 3.7
pais <- read.csv("/Users/carinapeng/Harvard-WHO/1-EpiEstim/pais_timeseries.csv")
pais[,1] <- as.Date(pais[,1], "%d/%m/%y")
df <- estimate_R(pais,
method = "parametric_si",
config = make_config(list(mean_si = 4.8,
std_si = 2.3)))
Rt <- data.frame(df$R)
Rt_observed <- mean(Rt$Mean.R.)
impact_contact_reduction <- Rt_observed / (R0 * impact_case_isolation)
impact_contact_reduction
# [1] 0.3429082
perc_contact_reduction <- round((1 - impact_contact_reduction) *100), digits = 2)
perc_contact_reduction <- round((1 - impact_contact_reduction) *100, digits = 2)
perc_contact_reduction
# [1] 39.21856
perc_contact_reduction <- round((1 - impact_contact_reduction) *100, digits = 0)
perc_contact_reduction
# [1] 39.21856
perc_contact_reduction <- round((1 - impact_contact_reduction) *100, digits = 2)
perc_contact_reduction
# [1] 39
shiny::runApp('carina')
runApp('carina')
runApp('carina')
runApp('carina')
# Define UI for application
ui <- fluidPage(navbarPage("WHO / PAHO",
tabPanel("Intro",
sidebarPanel(# Input: Select a file ----
fileInput("file1", "Insert CSV File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Horizontal line ----
tags$hr(),
# Input: Checkbox if file has header ----
checkboxInput(inputId = "header", label = "Header", value = TRUE),
# Input: Select separator ----
radioButtons(inputId = "sep",
label = "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
# Input: Select quotes ----
radioButtons(inputId = "quote",
label = "Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons(inputId = "disp",
label = "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
mainPanel(withMathJax(includeMarkdown("/Users/carinapeng/Harvard-WHO/carina/first_page.Rmd")),
tableOutput("content1"))
)
))
))
ui <- fluidPage(navbarPage("WHO / PAHO",
ui <- fluidPage(navbarPage("WHO / PAHO",
library(incidence)
library(cluster.datasets)
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for application
ui <- fluidPage(navbarPage("WHO / PAHO",
tabPanel("First task",
sidebarLayout(
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Insert CSV File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Horizontal line ----
tags$hr(),
# Input: Checkbox if file has header ----
checkboxInput(inputId = "header", label = "Header", value = TRUE),
# Input: Select separator ----
radioButtons(inputId = "sep",
label = "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
# Input: Select quotes ----
radioButtons(inputId = "quote",
label = "Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons(inputId = "disp",
label = "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
mainPanel(
tabsetPanel(
tabPanel("Table",
# https://shiny.rstudio.com/gallery/mathjax.html
withMathJax(includeMarkdown("/Users/carinapeng/Harvard-WHO/carina/first_page.Rmd")),
tableOutput("content1")),
tabPanel("Plot",
plotOutput("content2"),
downloadButton("downloadPlot", "Download plot")),
tabPanel("Summary",
h3("Summary Statistics"),
verbatimTextOutput("content3"),
tableOutput("content4"),
downloadButton("downloadData", "Download summary statistics")
))),
tabPanel("Second task",
sidebarPanel("CovidSIM",
numericInput("Dp", "Prodromal period [days]:", 2),
numericInput("Di", "Early infective period [days]:", 5),
numericInput("Dl", "Late infective period [days]:", 7),
numericInput("Cp", "Relative contagiousness in the prodromal period:", 1),
numericInput("Cl", "Relative contagiousness in the late infective period:", 0.05),
numericInput("Fsick", "Infections which will lead to sickness:", 0.67),
numericInput("Fiso", "Probability that a sick patient is isolated:", 0.5),
numericInput("Phome", "Contact reduction for cases in home isolation:", 0.75),
actionButton("submitbutton",
"submit",
class = "btn btn-primary")
)),
mainPanel(
tags$label(h3("Status/Output")),
verbatimTextOutput("calculation"),
tableOutput("tabledata")
)
)
)))
# Run the application
shinyApp(ui = ui, server = server)
# Load libraries
library(shiny)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# Define UI for application
ui <- fluidPage(navbarPage("WHO / PAHO",
tabPanel("First task",
sidebarLayout(
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Insert CSV File",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Horizontal line ----
tags$hr(),
# Input: Checkbox if file has header ----
checkboxInput(inputId = "header", label = "Header", value = TRUE),
# Input: Select separator ----
radioButtons(inputId = "sep",
label = "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
# Input: Select quotes ----
radioButtons(inputId = "quote",
label = "Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons(inputId = "disp",
label = "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
mainPanel(
tabsetPanel(
tabPanel("Table",
# https://shiny.rstudio.com/gallery/mathjax.html
withMathJax(includeMarkdown("/Users/carinapeng/Harvard-WHO/carina/first_page.Rmd")),
tableOutput("content1")),
tabPanel("Plot",
plotOutput("content2"),
downloadButton("downloadPlot", "Download plot")),
tabPanel("Summary",
h3("Summary Statistics"),
verbatimTextOutput("content3"),
tableOutput("content4"),
downloadButton("downloadData", "Download summary statistics")
))),
tabPanel("Second task",
sidebarPanel("CovidSIM",
numericInput("Dp", "Prodromal period [days]:", 2),
numericInput("Di", "Early infective period [days]:", 5),
numericInput("Dl", "Late infective period [days]:", 7),
numericInput("Cp", "Relative contagiousness in the prodromal period:", 1),
numericInput("Cl", "Relative contagiousness in the late infective period:", 0.05),
numericInput("Fsick", "Infections which will lead to sickness:", 0.67),
numericInput("Fiso", "Probability that a sick patient is isolated:", 0.5),
numericInput("Phome", "Contact reduction for cases in home isolation:", 0.75),
actionButton("submitbutton",
"submit",
class = "btn btn-primary")
)),
mainPanel(
tags$label(h3("Status/Output")),
verbatimTextOutput("calculation"),
tableOutput("tabledata")
)
)
)))
server <- function(input, output, session){
datasetInput <- reactive({
impact_case_isolation <- (input$Cp*input$Dp+(1-input$Fsick*input$Fiso*input$Phome)*(input$Di+input$Cl*input$Dl))/(input$Cp*input$Dp+input$Di+input$Cl*input$Dl)
impact_case_isolation <- data.frame(impact_case_isolation)
names(impact_case_isolation) <- "BMI"
print(impact_case_isolation)
})
output$calculation <- renderPrint({
if(input$submitbutton>0) {
isolate("Calculation complete.")
} else{
return("Server is ready for calculation.")
}
})
output$tabledata <- renderTable({
if(input$submitbutton>0) {
isolate(datasetInput())
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
?sidebarLayout
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('~/Dropbox/Harvard-WHO/Harvard-WHO/COVID19')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
shiny::runApp('~/Dropbox/Harvard-WHO/Harvard-WHO/COVID19')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
round(df()$R$Mean)
mean(df()$R$Mean)
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
runApp('carina/new_shiny')
