library(shiny); runApp('2-ShinyApp/demo1.R')
runApp('2-ShinyApp/demo4.R')
runApp('2-ShinyApp/demo4.R')
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
# explore data and write to file
head(Flu2009$incidence)
head(Flu2009$si_data)
write.csv(Flu2009, "Flu2009.csv")
## 1. serial interval (SI) distribution:
## interval-ceonsored serial interval data:
## each line represents a transmission event,
## EL/ER show the lower/upper bound of the symptoms onset date in the infector
## SL/SR show the same for the secondary case
## type has entries 0 corresponding to doubly interval-censored data
## (see Reich et al. Statist. Med. 2009).
png("incidents.png")
plot(as.incidence(Flu2009$incidence$I, dates = Flu2009$incidence$dates))
dev.off()
res_parametric_si <- estimate_R(Flu2009$incidence,
method="parametric_si",
config = make_config(list(
mean_si = 2.6,
std_si = 1.5))
)
# Explore model
head(res_parametric_si)
head(res_parametric_si$R)
# Write the rate of transmission values
Rt <- data.frame(res_parametric_si$R)
write.csv(Rt, "Rt.csv")
mean(Flu2009$incidence$I)
sd(Flu2009$incidence$I)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
data(Flu2009)
library(EpiEstim)
install.packages("EpiEstim")
library(EpiEstim)
install.packages("ggplot2")
install.packages("EpiEstim")
install.packages("incidence")
install.packages("cluster.datasets")
install.packages("cluster.datasets")
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
library(EpiEstim)
library(EpiEstim)
png("incidents.png")
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
library(EpiEstim)
install.packages('EpiEstim')
library(EpiEstim)
library(EpiEstim)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
View(Flu2009)
head(Flu2009$incidence)
head(Flu2009$si_data)
write.csv(Flu2009, "Flu2009.csv")
png("incidents.png")
res_parametric_si <- estimate_R(Flu2009$incidence,
method="parametric_si",
config = make_config(list(
mean_si = 2.6,
std_si = 1.5))
)
View(res_parametric_si)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
# explore data and write to file
head(Flu2009$incidence)
head(Flu2009$si_data)
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
# explore data and write to file
head(Flu2009$incidence)
head(Flu2009$si_data)
write.csv(Flu2009, "Flu2009.csv")
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
# explore data and write to file
head(Flu2009$incidence)
head(Flu2009$si_data)
write.csv(Flu2009, "Flu2009.csv")
## 1. serial interval (SI) distribution:
## interval-ceonsored serial interval data:
## each line represents a transmission event,
## EL/ER show the lower/upper bound of the symptoms onset date in the infector
## SL/SR show the same for the secondary case
## type has entries 0 corresponding to doubly interval-censored data
## (see Reich et al. Statist. Med. 2009).
png("incidents.png")
plot(as.incidence(Flu2009$incidence$I, dates = Flu2009$incidence$dates))
dev.off()
res_parametric_si <- estimate_R(Flu2009$incidence,
method="parametric_si",
config = make_config(list(
mean_si = 2.6,
std_si = 1.5))
head(res_parametric_si)
head(res_parametric_si$R)
Rt <- data.frame(res_parametric_si$R)
write.csv(Rt, "Rt.csv")
mean(Flu2009$incidence$I)
sd(Flu2009$incidence$I)
png("res_parametric_si.png")
plot(res_parametric_si, legend = FALSE)
dev.off()
png("res_parametric_si.png")
plot(res_parametric_si, legend = FALSE)
dev.off()
png("res_parametric_si.png")
plot(res_parametric_si, legend = FALSE)
dev.off()
res_non_parametric_si <- estimate_R(Flu2009$incidence,
method="non_parametric_si",
config = make_config(list(
si_distr = Flu2009$si_distr))
)
png("res_nonparametric_si.png")
plot(res_non_parametric_si, "R")
dev.off()
View(Rt)
View(res_parametric_si)
View(res_non_parametric_si)
View(Flu2009)
discr_si(0:20, mu = 2.6, sigma = 1.5)
mean(Flu2009$incidence$I)
sd(Flu2009$incidence$I)
Flu2009$incidence
library(shiny); runApp('2-ShinyApp/demo1.R')
runApp('2-ShinyApp/demo4.R')
runApp('2-ShinyApp/demo4.R')
library(EpiEstim)
library(ggplot2)
library(incidence)
library(cluster.datasets)
# load data
data(Flu2009)
# explore data and write to file
head(Flu2009$incidence)
head(Flu2009$si_data)
write.csv(Flu2009, "Flu2009.csv")
## 1. serial interval (SI) distribution:
## interval-ceonsored serial interval data:
## each line represents a transmission event,
## EL/ER show the lower/upper bound of the symptoms onset date in the infector
## SL/SR show the same for the secondary case
## type has entries 0 corresponding to doubly interval-censored data
## (see Reich et al. Statist. Med. 2009).
png("incidents.png")
plot(as.incidence(Flu2009$incidence$I, dates = Flu2009$incidence$dates))
dev.off()
res_parametric_si <- estimate_R(Flu2009$incidence,
method="parametric_si",
config = make_config(list(
mean_si = 2.6,
std_si = 1.5))
)
View(res_parametric_si)
library(shiny)
library(shiny)
runExample("01_hello")
shiny::runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
shiny::runApp('~/Dropbox/Harvard-WHO/Harvard-WHO/COVID19')
shiny::runApp('~/Dropbox/Harvard-WHO/Harvard-WHO/COVID19')
runApp()
runApp('carina_shiny')
shiny::runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
runApp('carina_shiny')
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
# when reading semicolon separated files,
# having a comma separator causes `read.csv` to error
tryCatch(
{
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
# Plotting function using ggplot2
output$plot <- renderPlot({
res_parametric_si <- estimate_R(x,
method = "parametric_si",
config = make_config(list(
mean_si = 4.8,
std_si = 2.3)))
plot_R_data <- data.frame(dates = res_parametric_si$dates)
# plot(df())
})
}
server <- function(input, output) {
csv <- reactive({
req(input$file1)
read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
})
#df <- reactive({
#req(input$file1)
#x = csv()
#x[,1]<-as.Date(x[,1], "%d/%m/%Y")
#dfR <- estimate_R(x, method = "parametric_si", config = make_config(list(mean_si = 4.8, std_si = 2.3)))
#return(dfR)
#})
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
# when reading semicolon separated files,
# having a comma separator causes `read.csv` to error
tryCatch(
{
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
# Plotting function using ggplot2
output$plot <- renderPlot({
res_parametric_si <- estimate_R(x,
method = "parametric_si",
config = make_config(list(
mean_si = 4.8,
std_si = 2.3)))
plot_R_data <- data.frame(dates = res_parametric_si$dates)
# plot(df())
})
}
View(server)
shiny::runApp('carina_shiny')
# Prodromal period [days]
Dp<-2
47.5
# Early infective period,
Di<-5
47.5
# Late infective period [days],
Dl<-7
5
# Relative contagiousness in the prodromal period,
Cp<-1
# Relative contagiousness in the late infective period,
Cl<-0.05/0.475
Cl
# [1] 0.1052632
0.025/0.0475
# [1] 0.5263158
0.05/(0.475)
# [1] 0.1052632
# [1] 1.052632
# [1] 0.05263158
# Infections which will lead to sickness,
Fsick<-0.67
# Fsick = P(Prodromal + Early Infective + Late Infective | Latent Period)
# Probability that a sick patient is isolated,
Fiso<-0.5
# Contact reduction for cases in home isolation,
Phome<- 0.75
# Estimation of the impact by contact reduction
# This section allows to estimate the impact of contact reduction based on a number of parameters. The parameter for R0 can be suggested by default in the interface, but it should be allowed to be changed. With those parameters, the formula calculates the impact on the transmission by applying contact reduction.
impact_case_isolation<-(Cp*Dp+(1-Fsick*Fiso*Phome)*(Di+Cl*Dl))/(Cp*Dp+Di+Cl*Dl)
impact_case_isolation
# [1] 0.8171173
# Rt_observed <- estimated result by EpiEstim tool
library(EpiEstim)
data(Flu2009)
res_parametric_si <- estimate_R(Flu2009$incidence,
method="parametric_si",
config = make_config(list(
mean_si = 2.6,
std_si = 1.5)))
Rt <- data.frame(res_parametric_si$R)
Rt_observed <- Rt
R0 <- 3.7
impact_contact_reduction <- Rt_observed / (R0 * impact_case_isolation)
head(impact_contact_reduction)
#     t_start    t_end   Mean.R.     Std.R. Quantile.0.025.R. Quantile.0.05.R. Quantile.0.25.R. Median.R. Quantile.0.75.R.
# 1 0.6615213 2.646085 0.5741336 0.13532458         0.3402679        0.3710914        0.8133313 0.5635372        0.8133313
# 2 0.9922820 2.976846 0.5785559 0.12063724         0.3667548        0.3954177        0.7902271 0.5701930        0.7902271
# 3 1.3230426 3.307607 0.5083984 0.10167967         0.3290086        0.3534818        0.6863867 0.5016360        0.6863867
# 4 1.6538033 3.638367 0.4735960 0.08950123         0.3147011        0.3366022        0.6297839 0.4679700        0.6297839
# 5 1.9845639 3.969128 0.4705814 0.08318782         0.3218773        0.3426046        0.6152503 0.4656886        0.6152503
# 6 2.3153246 4.299889 0.5409172 0.08346533         0.3898455        0.4113305        0.6851285 0.5366303        0.6851285
#   Quantile.0.95.R. Quantile.0.975.R.
# 1        0.8133313         0.8681744
# 2        0.7902271         0.8378562
# 3        0.6863867         0.7261982
# 4        0.6297839         0.6644481
# 5        0.6152503         0.6470791
# 6        0.6851285         0.7163434
pct_contact_reduction<- 1 - impact_contact_reduction
head(pct_contact_reduction)
#       t_start     t_end   Mean.R.    Std.R. Quantile.0.025.R. Quantile.0.05.R. Quantile.0.25.R. Median.R. Quantile.0.75.R.
# 1  0.33847869 -1.646085 0.4258664 0.8646754         0.6597321        0.6289086        0.1866687 0.4364628        0.1866687
# 2  0.00771803 -1.976846 0.4214441 0.8793628         0.6332452        0.6045823        0.2097729 0.4298070        0.2097729
# 3 -0.32304263 -2.307607 0.4916016 0.8983203         0.6709914        0.6465182        0.3136133 0.4983640        0.3136133
# 4 -0.65380328 -2.638367 0.5264040 0.9104988         0.6852989        0.6633978        0.3702161 0.5320300        0.3702161
# 5 -0.98456394 -2.969128 0.5294186 0.9168122         0.6781227        0.6573954        0.3847497 0.5343114        0.3847497
# 6 -1.31532460 -3.299889 0.4590828 0.9165347         0.6101545        0.5886695        0.3148715 0.4633697        0.3148715
#   Quantile.0.95.R. Quantile.0.975.R.
# 1        0.1866687         0.1318256
# 2        0.2097729         0.1621438
# 3        0.3136133         0.2738018
# 4        0.3702161         0.3355519
# 5        0.3847497         0.3529209
# 6        0.3148715         0.2836566
# Prodromal period [days]
Dp<-2
47.5
# Prodromal period [days]
Dp<-2
# Early infective period
Di<-5
# Late infective period [days]
Dl<-7
# Relative contagiousness in the prodromal period
Cp<-1
# Relative contagiousness in the late infective period
Cl<-0.05
# Infections which will lead to sickness
Fsick<-0.67
# Probability that a sick patient is isolated
Fiso<-0.5
# Contact reduction for cases in home isolation
Phome<- 0.75
impact_case_isolation <- (Cp*Dp+(1-Fsick*Fiso*Phome)*(Di+Cl*Dl))/(Cp*Dp+Di+Cl*Dl)
impact_case_isolation
